@model IEnumerable<Appointments>

@{
    ViewData["Title"] = "Index";
    DateTime startDate = DateTime.Today;
    int end = 5;
    string location = ViewData["Location"] as string;
    Locations actualLocation = ViewData["ActualLocation"] as Locations;

    int tableHeight = CalculateTableHeight(); // Call the method to calculate the table height

    bool LoggedIn = (User != null) && (User.Identity.IsAuthenticated);
}

<div class="container d-flex align-items-center justify-content-evenly">
    <div class="row">
        <div class="card bg-dark w-100">
            <div class="card-header">
    
            
       
                <div class="p-2">
                    <h1>Available Appointments</h1>
                </div>
            </div>
            <div class="card-body w-100">

                    <table class="table appointmentsTable w-100">
                        <thead>
                            <tr id="dateRow">
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 8; i <= 20; i++)
                            {
                                <tr>
                                    <th>
                                        <div>@i</div>
                                    </th>
                                    @for (int j = 0, slotsAdded = 0; slotsAdded < 5; j++)
                                    {
                                        DateTime currentDate = startDate.AddDays(j);
                                        if (currentDate.DayOfWeek == DayOfWeek.Saturday || currentDate.DayOfWeek == DayOfWeek.Sunday)
                                        {
                                            continue;
                                        }
                                        bool isOccupied = Model.Any(obj => obj != null && obj.Time.Hour == i && obj.Time.Date == currentDate);
                                        bool isValidTime = (actualLocation != null) && (actualLocation.StaryTime.Hour <= i) && (actualLocation.EndTime.Hour > i);
                                        <td>
                                            <b>
                                                @if(isValidTime)
                                                {
                                                    <div class="@(isOccupied ? "text-danger" : "text-success")">
                                                    @if (isOccupied)
                                                    {
                                                        var appointment = Model.FirstOrDefault(obj => obj.Time.Hour == i && obj.Time.Date == currentDate);
                                                        var appointmentId = appointment?.Id;
                                                        if (appointmentId != null)
                                                        {
                                                            if (LoggedIn)
                                                            {
                                                                <a class="text-danger" style="text-decoration:none; color:red;" asp-controller="Appointments" asp-action="Remove" asp-route-id="@appointmentId">Occupied</a>
                                                            }
                                                            else
                                                            {
                                                                <div class="text-danger" style="text-decoration:none; color:red;">Occupied</div>
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {


                                                        var loc = location;
                                                        var date = startDate.AddDays(j).AddHours(i);
                                                        string locEncoded = loc != null ? Uri.EscapeDataString(loc) : string.Empty;
                                                        if (LoggedIn)
                                                        {
                                                            <a class="text-success" style="text-decoration:none" asp-controller="Appointments" asp-action="CreateWithData" asp-route-location="@locEncoded" asp-route-date="@date.ToString("yyyy-MM-ddTHH:mm:ss")">Free</a>
                                                        }
                                                        else
                                                        {
                                                            <div class="text-success" style="text-decoration:none">Free</div>
                                                        }
                                                    }
                                                </div>
                                                }
                                                else
                                                {
                                                    <div style="color:orangered">
                                                        Closed
                                                    </div>
                                                }
                                            </b>
                                        </td>
                                        slotsAdded++;
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="card-footer">
                    <a class="btn btn-light mb-3" asp-action="Select">Select New Location</a>
                </div>
            </div>
    </div>
</div>
<script>
    // Get the reference to the table header row
    const dateRow = document.getElementById("dateRow");

    // Get the current date
    const today = new Date();

    // Variable to keep track of the number of slots added
    let slotsAdded = 0;

    // Loop to populate the next 5 days
    for (let i = 0; slotsAdded < 5; i++) {
        // Create a new date object for each day
        const date = new Date(today);
        date.setDate(today.getDate() + i);

        // Check if the current day is a weekend (Saturday or Sunday)
        if (date.getDay() === 0 || date.getDay() === 6) {
            // Skip weekends
            continue;
        }

        // Extract the day and month from the date
        const day = date.getDate();
        const month = date.toLocaleString("default", { month: "short" });

        // Create a new table cell for the date and append it to the header row
        const th = document.createElement("th");
        th.textContent = `${day} ${month}`;
        dateRow.appendChild(th);

        // Increment the number of slots added
        slotsAdded++;
    }

@{
        // Calculate the height of the table
        int CalculateTableHeight()
        {
            // Perform the necessary calculations to determine the height of the table
            // For example, you can multiply the number of rows by a fixed row height

            int rowCount = 5; // Number of rows in the table
            int rowHeight = 40; // Fixed row height in pixels

            return rowCount * rowHeight;
        }
}

</script>
